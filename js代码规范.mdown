# 命名的规范

1. 命名具有描述性

2. 进行驼峰式命名对象，函数，实例

3. 构造函数首字母进行大写

4. 私有属性已下划线进行命名

5. 使用self保存this的引用
  function () {
        var self = this;
        return function () {
            console.log(self);
        };
    }

6.  尽量命名函数



# 变量 

1. 使用var(关键字)进行声明变量

2. 对于每个变量进行单独声明，不要一次声明过多

3. 在赋值很多变量的时候，要将未赋值的变量，放在后面

4. 在作用域的顶部进行函数的声明



# 对象

1. 使用字面量方式创造对象

2. 禁止使用保留字作为对象的属性

3. 用.号访问对象属性不要用[]



# 数组

1. 使用字面量创建数组

2. 使用slice()进行复制数组

3. 使用slice方法将数组对象转化成数组



# 字符串

1. 字符串使用''

2. 长字符应该用+连接多个短字符串进行连接

3. 用编程创造的字符串，应该使用json
 function inbox(messages) {
        items = [];

        for (i = 0; i < length; i++) {
            // use direct assignment in this case because we're micro-optimizing.
            items[i] = '<li>' + messages[i].message + '</li>';
        }

        return '<ul>' + items.join('') + '</ul>';
    }



# 函数

不要在非函数块中使用函数声明，可以使用字面量的形式


#代码块

所有的多行的代码块使用花括号


# 比较符号

===  !==  多使用这两种


# 注释

多行注释使用 /**...*/

使用//FIXME: 进行声明问题
使用//TODO: 声明所需实现


# 空格

1. 花括号前加一个空格

2. 在包含条件表达式的空格前面加一个空格

3. 包含函数参数列表的括号前面不加空格

4. 运算符前后不加空格

5. 在文件末尾加单一分行符 

6. 在代码块与下一代码之间留一行空格


#  分号

1. 自执行函数前后加分号  //匿名函数 

2. 每条代码后加分号   //尤大说其实不必要


# 强制转换

将强制转换放在代码语句前面


